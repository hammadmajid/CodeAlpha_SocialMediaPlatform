- hosts: backend
  become: yes
  vars_files:
    - group_vars/all.yml
  vars:
    app_user: azureuser
    app_dir: /opt/pubment
    node_version: "20"
  tasks:
    - name: Update apt cache and upgrade
      apt:
        update_cache: yes
        upgrade: dist

    - name: Install required packages
      apt:
        name:
          - curl
          - git
          - build-essential
          - ufw
        state: present

    - name: Install Caddy
      shell: |
        curl -1sLf 'https://dl.cloudsmith.io/public/caddy/stable/gpg.key' | sudo gpg --dearmor -o /usr/share/keyrings/caddy-stable-archive-keyring.gpg
        curl -1sLf 'https://dl.cloudsmith.io/public/caddy/stable/debian.deb.txt' | sudo tee /etc/apt/sources.list.d/caddy-stable.list
        apt update
        apt install caddy -y
      args:
        creates: /usr/bin/caddy

    - name: Install Node.js {{ node_version }}
      shell: |
        curl -fsSL https://deb.nodesource.com/setup_{{ node_version }}.x | sudo -E bash -
        apt-get install -y nodejs
      args:
        creates: /usr/bin/node

    - name: Install pnpm globally
      npm:
        name: pnpm
        global: yes

    - name: Install turbo globally
      npm:
        name: turbo
        global: yes

    - name: Set up pnpm directories for azureuser
      file:
        path: "/home/azureuser/.local/share/pnpm"
        state: directory
        owner: azureuser
        group: azureuser
        mode: '0755'
        recurse: yes

    - name: Set up pnpm config directory for azureuser
      file:
        path: "/home/azureuser/.config/pnpm"
        state: directory
        owner: azureuser
        group: azureuser
        mode: '0755'

    - name: Create application directory
      file:
        path: "{{ app_dir }}"
        state: directory
        owner: "{{ app_user }}"
        group: "{{ app_user }}"
        mode: '0755'

    - name: Clone repository
      git:
        repo: 'https://github.com/hammadmajid/pubment.git'
        dest: "{{ app_dir }}/app"
        version: main
        force: yes
      become_user: "{{ app_user }}"

    - name: Set ownership of application directory
      file:
        path: "{{ app_dir }}"
        owner: "{{ app_user }}"
        group: "{{ app_user }}"
        recurse: yes

    - name: Create .env file from template
      template:
        src: templates/env.j2
        dest: "{{ app_dir }}/app/.env"
        owner: "{{ app_user }}"
        group: "{{ app_user }}"
        mode: '0600'

    - name: Install dependencies
      shell: pnpm install
      args:
        chdir: "{{ app_dir }}/app"
      become_user: "{{ app_user }}"

    - name: Build the application
      shell: turbo run build --filter=server...
      args:
        chdir: "{{ app_dir }}/app"
      become_user: "{{ app_user }}"

    - name: Create systemd service file
      template:
        src: templates/app.service.j2
        dest: /etc/systemd/system/pubment.service
        mode: '0644'
      notify:
        - reload systemd
        - restart pubment

    - name: Enable and start pubment service
      systemd:
        name: pubment
        enabled: yes
        state: started
        daemon_reload: yes

    - name: Configure UFW - allow SSH
      ufw:
        rule: allow
        name: OpenSSH

    - name: Configure UFW - allow HTTP
      ufw:
        rule: allow
        port: 80
        proto: tcp

    - name: Configure UFW - allow HTTPS
      ufw:
        rule: allow
        port: 443
        proto: tcp

    - name: Configure UFW - allow internal traffic on port 3000
      ufw:
        rule: allow
        port: 3000
        proto: tcp

    - name: Enable UFW
      ufw:
        state: enabled

    - name: Configure Caddy reverse proxy
      copy:
        dest: /etc/caddy/Caddyfile
        content: |
          api.pubment.xyz {
              reverse_proxy localhost:3000

              # Enable CORS headers
              header {
                  Access-Control-Allow-Origin "https://pubment.xyz"
                  Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS"
                  Access-Control-Allow-Headers "Content-Type, Authorization"
                  Access-Control-Allow-Credentials "true"
              }

              # Handle preflight requests
              @options method OPTIONS
              respond @options 200
          }
      notify:
        - restart caddy

    - name: Validate Caddy configuration
      command: caddy validate --config /etc/caddy/Caddyfile
      register: caddy_validate
      failed_when: caddy_validate.rc != 0

    - name: Enable and start Caddy service
      systemd:
        name: caddy
        enabled: yes
        state: started
        daemon_reload: yes

  handlers:
    - name: reload systemd
      systemd:
        daemon_reload: yes

    - name: restart pubment
      systemd:
        name: pubment
        state: restarted

    - name: restart caddy
      systemd:
        name: caddy
        state: restarted